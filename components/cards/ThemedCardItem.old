import React, { memo, useEffect, useMemo, useState } from 'react';
import { Image, StyleSheet, View } from 'react-native';
import { ThemedText } from '../ThemedText';
import { ThemedView } from '../ThemedView';
import QRCode from 'react-native-qrcode-svg';
import { useColorScheme } from '@/hooks/useColorScheme';
import { TouchableHighlight } from 'react-native';
import { getIconPath } from '@/utils/returnIcon';
import { returnItemData } from '@/utils/returnItemData';
import Ionicons from '@expo/vector-icons/Ionicons';
import { useThemeColor } from '@/hooks/useThemeColor';
import Animated, { useSharedValue, useAnimatedStyle, withTiming, runOnJS } from 'react-native-reanimated';

export type ThemedCardItemProps = {
    lightColor?: string;
    darkColor?: string;
    code: string;
    type: "bank" | "store" | "ewallet";
    qr: string;
    accountName?: string;
    accountNumber?: string;
    isPinned?: boolean;
    onMoreButtonPress?: () => void;
    onPinnedButtonPress?: () => void;
    onItemLongPress?: () => void;
    style?: object;
};

export const ThemedCardItem = memo(function ThemedCardItem({
    lightColor,
    darkColor,
    code,
    type,
    qr,
    accountName,
    accountNumber,
    isPinned,
    onMoreButtonPress,
    onPinnedButtonPress,
    onItemLongPress,
    style
}: ThemedCardItemProps): JSX.Element {
    const colorScheme = useColorScheme();
    const colors = useThemeColor({ light: lightColor, dark: darkColor }, 'text');
    const { full_name, name, color, accent_color } = useMemo(() => returnItemData(code, type), [code, type]);
    const iconPath = useMemo(() => getIconPath(code), [code]);

    const [isExpanded, setIsExpanded] = useState(isPinned || false);
    const [isRendered, setIsRendered] = useState(isPinned || false);
    const height = useSharedValue(isPinned ? 250 : 0);
    const opacity = useSharedValue(isPinned ? 1 : 0);

    useEffect(() => {
        if (isExpanded) {
            setIsRendered(true); // Start rendering the QR code when expanding
        }
        
        const fadeOutDuration = 200; // Faster fade-out duration
        const fadeInDuration = 500;  // Regular fade-in duration

        opacity.value = withTiming(isExpanded ? 1 : 0,
            { duration: isExpanded ? fadeInDuration : fadeOutDuration },
            (finished) => {
                if (!isExpanded && finished) {
                    runOnJS(setIsRendered)(false); // Stop rendering the QR code when collapsing and animation is done
                }
            });
    }, [isExpanded]);

    useEffect(() => {
        setIsExpanded(isPinned ?? false);
        height.value = withTiming(isPinned ? 250 : 0, { duration: 300 });
      }, [isPinned]);

    const toggleExpand = () => {
        setIsExpanded(prev => !prev);
        height.value = withTiming(isExpanded ? 0 : 250, { duration: 300 });
    };

    const animatedStyle = useAnimatedStyle(() => ({
        height: height.value,
    }));

    const animatedOpacityStyle = useAnimatedStyle(() => ({
        opacity: opacity.value,
        marginTop: 10,
    }));

    return (
        <TouchableHighlight
            onPress={toggleExpand}
            onLongPress={onItemLongPress}
            style={[styles.touchableHighlight, style]}
            underlayColor={colorScheme === 'light' ? color.dark : color.light}
        >
            <ThemedView
                style={[styles.itemContainer, { backgroundColor: colorScheme === 'light' ? color.light : color.dark }]}
            >
                <View style={styles.headerContainer}>
                    <View style={styles.leftHeaderContainer}>
                        <View style={styles.iconContainer}>
                            <Image source={iconPath} style={styles.icon} resizeMode="contain" />
                        </View>
                        <View style={styles.labelContainer}>
                            <ThemedText type="defaultSemiBold" style={styles.companyName}>{name}</ThemedText>
                            {type == "bank" ?
                                <ThemedText
                                    style={styles.companyFullName}
                                    numberOfLines={1}>
                                    {accountNumber}
                                </ThemedText> :
                                <ThemedText
                                    style={styles.companyFullName}
                                    numberOfLines={1}>
                                    {full_name}
                                </ThemedText>
                            }
                        </View>
                    </View>
                    <View style={styles.rightHeaderContainer}>
                        <TouchableHighlight
                            onPress={onPinnedButtonPress}
                            underlayColor={colorScheme === 'light' ? color.dark : color.light}
                            style={[styles.expandIconContainer, { backgroundColor: colorScheme === 'light' ? accent_color.light : accent_color.dark }]}
                        >
                            <Ionicons name={isPinned ? 'pin' : 'pin-outline'} size={18} color={colors} />
                        </TouchableHighlight>

                        <TouchableHighlight
                            onPress={onMoreButtonPress}
                            underlayColor={colorScheme === 'light' ? color.dark : color.light}
                            style={[styles.expandIconContainer, { backgroundColor: colorScheme === 'light' ? accent_color.light : accent_color.dark }]}
                        >
                            <Ionicons name={'ellipsis-vertical'} size={18} color={colors} />
                        </TouchableHighlight>
                    </View>
                </View>

                <Animated.View style={[styles.qrContainer, animatedStyle, { marginTop: isRendered && type == 'bank' ? 15 : 0 }]}>
                    {isRendered && (
                        <Animated.View style={animatedOpacityStyle}>
                            <QRCode
                                value={qr}
                                size={180}
                                logo={iconPath}
                                logoSize={30}
                                logoBackgroundColor="white"
                                logoBorderRadius={50}
                                logoMargin={3}
                                quietZone={3}
                            />
                            {type == 'bank' && (
                                <View style={[styles.infoContainer, { marginTop: isRendered ? 15 : 0 }]}>
                                    <ThemedText type="defaultSemiBold" style={styles.accountName} numberOfLines={1}>{accountName}</ThemedText>
                                    <ThemedText style={styles.accountNumber} numberOfLines={1}>{accountNumber}</ThemedText>
                                </View>
                            )}
                        </Animated.View>
                    )}
                </Animated.View>
            </ThemedView>
        </TouchableHighlight>
    );
});

const styles = StyleSheet.create({
    touchableHighlight: {
        borderRadius: 15,
    },
    itemContainer: {
        borderRadius: 10,
        padding: 15,
        overflow: 'hidden',
    },
    headerContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
        gap: 10,
    },
    dragIcon: {
        paddingVertical: 15,
    },
    leftHeaderContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        gap: 10,
    },
    rightHeaderContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        gap: 10,
    },
    iconContainer: {
        width: 50,
        aspectRatio: 1,
        borderRadius: 25,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'white',
    },
    labelContainer: {
        flexDirection: 'column',
    },
    icon: {
        width: '50%',
        height: '50%',
        resizeMode: 'contain',
    },
    companyName: {
        fontSize: 16,
    },
    companyFullName: {
        fontSize: 14,
        flexShrink: 1,
        flexWrap: 'nowrap',
        width: 200,  // Adjust as needed
    },
    qrContainer: {
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        overflow: 'hidden',
    },
    infoContainer: {
        justifyContent: 'center',
    },
    accountName: {
        fontSize: 20,
        textAlign: 'center',
    },
    accountNumber: {
        fontSize: 16,
        textAlign: 'center',
    },
    pinContainer: {
    },
    expandIconContainer: {
        borderRadius: 50,
        padding: 10,
    },
});